import 'package:dart_telegram_avalon/inline_buttons.dart';
import 'package:teledart/model.dart';
import 'action_telegram.dart';
import 'generate_buttons.dart';
import 'messages.dart';
import 'roles.dart';
import 'a_game_controller.dart';
import 'users.dart';
import 'utils.dart';

class GameSettings {
  const GameSettings(this.playersInTurn, this.countEvil, this.twoFail);

  final List<int> playersInTurn;
  final int countEvil;
  final bool twoFail;
}

const Map<int, GameSettings> _gameSettings = {
  5: GameSettings([2, 3, 2, 3, 3], 2, false),
  6: GameSettings([2, 3, 4, 3, 4], 2, false),
  7: GameSettings([2, 3, 3, 4, 4], 3, true),
  8: GameSettings([3, 4, 4, 5, 5], 3, true),
  9: GameSettings([3, 4, 4, 5, 5], 3, true),
  10: GameSettings([3, 4, 4, 5, 5], 4, true),
  11: GameSettings([3, 4, 5, 6, 5], 4, true),
  12: GameSettings([3, 4, 5, 6, 5], 5, true)
};

class Player {
  Player(this._game, this.userData, [Role? role]) {
    this.role = role ?? Role(_game);
  }

  String get name {
    if (role is Arthur) {
      return "${Arthur.emoj} ${index + 1} ${userData.name}";
    } else {
      return '${index + 1} ${userData.name}';
    }
  }

  bool get isTurn => index == game.countTurnPlayer;
  final UserData userData;
  LadyAnswer? ladyAnswer;
  final AvGame _game;
  late Role role;
  String get url {
    if (role is Arthur) {
      return userData.urlText(name);
    } else {
      return userData.urlText(name);
    }
  }

  int get index => _game.players.indexOf(this);
  AvGame get game => _game;
  bool get isAdmin => userData == game.adminUserData;
  List<Player> get vision => role.vision();

  String roleMessage() {
    String messages = "";

    messages += "${userData.url}\\, –í–∞—à–∞ —Ä–æ–ª—å \\: ${role.toString()}\n";

    messages += role.aboutRole;
    messages += "\n";
    List<Player> playersVision = role.vision();

    if (playersVision.isNotEmpty) {
      messages += "\n–ò–≥—Ä–æ–∫–∏\\, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑–≤–µ—Å—Ç–Ω—ã –í–∞–º\\:\n";

      for (var onePlayer in playersVision) {
        messages += "${onePlayer.url} \n";
      }
    }

    return messages;
  }

  @override
  String toString() {
    return url;
  }

  InlineKeyboardMarkup? getButtons() {
    if (game.bStart) {
      return Buttons.gameMainMassage;
    } else {
      if (isAdmin) {
        return Buttons.admin;
      } else {
        return Buttons.leave;
      }
    }
  }

  String generateMainMessage() {
    return game.gameMainMessage;
  }
}

/// –û–±—â–∏–π —Ç–∏–ø —Ö–æ–¥–∞
abstract class Turn {
  final AvGame game;
  List<Player> actionsPlayers = [];
  String get messageChat => "Turn";
  void callback(Player player, String command, List<String> params) {}
  Turn(this.game);
  bool isCompleted = false;

  bool isActivePlayer(Player player) => actionsPlayers.contains(player);
  Map<Player, int> messageIdFromPlayer = {};

  String get resultString => "rsult Turn";

  String generateMessage(Player player) => "Turn";
  InlineKeyboardMarkup generateButton(Player player) => Buttons.delete;

  void initAllMessages() {
    for (var player in actionsPlayers) {
      initSecondMessage(player);
    }
  }

  void completeThisTurn() {
    isCompleted = true;
    actionsPlayers.clear();
  }

  void deleteSecondMessage(Player player) {
    TelegramDeleteMessage(player.userData.chatId, messageIdFromPlayer[player]!);
  }

  void refreshSecondMessage(Player player) {
    TelegramEditMessage(player.userData.chatId, messageIdFromPlayer[player]!,
        generateMessage(player), replyMarkup: generateButton(player),
        onError: () {
      initSecondMessage(player);
    });
  }

  void reSendSecondMessage(Player player) {
    deleteSecondMessage(player);
    initSecondMessage(player);
  }

  void initSecondMessage(Player player) async {
    try {
      var sendMessage = TelegramSendAndGetMeesage(
          player.userData, generateMessage(player),
          replyMarkup: generateButton(player),
          duration: Duration(hours: 2), onAutoDelete: (b) {
        if (b) {
          game.deleteGame();
        }
      }, onError: () {
        throw "";
      });

      var msg = await sendMessage.answer;

      messageIdFromPlayer[player] = msg.messageId;
    } catch (_) {
      game.deleteGame();
    }
  }
}

/// –í–æ–ø—Ä–æ—Å –†—É—Å–∞–ª–∫–∏
class LadyAsk extends Turn {
  LadyAsk(super.game) {
    if (game.ladyPlayer == null) {
      game.nextTurn();
      return;
    }
    playerLady = game.ladyPlayer!;
    actionsPlayers = [playerLady!];
  }

  Player? playerLady;
  Player? playerAnswer;

  @override
  String get resultString => "üßú‚Äç‚ôÄÔ∏è $playerLady —Ö–æ—á–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å $playerAnswer";

  @override
  String get messageChat =>
      "üßú‚Äç‚ôÄÔ∏è $playerLady –≤—ã–±–∏—Ä–∞–µ—Ç,—Å—Ç–æ—Ä–æ–Ω—É –∫–∞–∫–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Ö–æ—á–µ—Ç —É–∑–Ω–∞—Ç—å\\. ";

  @override
  String generateMessage(Player player) {
    if (playerAnswer == null) {
      return "–•–æ–¥ —Ä—É—Å–∞–ª–∫–∏\\! üßú‚Äç‚ôÄÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞\\.\n–í—ã —É–∑–Ω–∞–µ—Ç–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ—Ç –∏–≥—Ä–æ–∫ –∫ —Å–∏–ª–∞–º –î–æ–±—Ä–∞ –∏–ª–∏ –∫ —Å–∏–ª–∞–º –ó–ª–∞\\. –†—É—Å–∞–ª–∫–∞ –ø–µ—Ä–µ–π–¥–µ—Ç –∫ —ç—Ç–æ–º—É –∏–≥—Ä–æ–∫—É\\.";
    } else {
      return "–í—ã —É–≤–µ—Ä–µ–Ω—ã\\,—á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Å—Ç–æ—Ä–æ–Ω—É —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞\\?\n ${playerAnswer!.url}";
    }
  }

  @override
  InlineKeyboardMarkup generateButton(Player player) {
    if (playerAnswer == null) {
      return GenerateButtons.fromPlayers(
          players: game.players
              .where((pl) => (pl.ladyAnswer == null && pl != playerLady)),
          startStringCallback: "#ladyAsk",
          convertCallback: (pl) => "${pl.index}");
    } else {
      return InlineKeyboardMarkup(inlineKeyboard: [
        Buttons.gameAccept.inlineKeyboard[0],
        Buttons.gameReset.inlineKeyboard[0]
      ]);
    }
  }

  @override
  void callback(Player player, String command, List<String> params) {
    switch (command) {
      case '#ladyAsk':
        playerAnswer = game.players[int.parse(params[0])];
        break;

      case "#reset":
        playerAnswer = null;
        break;

      case "#accept":
        if (playerAnswer == null) {
          reSendSecondMessage(player);
          return;
        }

        if (playerAnswer!.ladyAnswer != null) {
          reSendSecondMessage(player);
          return;
        }

        deleteSecondMessage(player);
        completeThisTurn();
        game.nextTurn(
            newTurn: LadyAnswer(game, playerLady!, playerAnswer!),
            sendResult: false);
        return;
    }

    refreshSecondMessage(player);
  }
}

/// –û—Ç–≤–µ—Ç –†—É—Å–∞–ª–∫–∏
class LadyAnswer extends Turn {
  final Player playerLady;
  final Player answerPlayer;
  bool? answer;
  bool? result;

  LadyAnswer(super.game, this.playerLady, this.answerPlayer) {
    playerLady.ladyAnswer = this;
    game.ladyPlayer = answerPlayer;
    actionsPlayers = [answerPlayer];
  }

  @override
  String get messageChat =>
      "üßú‚Äç‚ôÄÔ∏è $playerLady —Ö–æ—á–µ—Ç —É–∑–Ω–∞—Ç—å —Å—Ç–æ—Ä–æ–Ω—É –∏–≥—Ä–æ–∫–∞ $answerPlayer\\.–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞\\.\\.\\. ";

  // –û—Ç—Ä–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∏–≥—Ä–æ–∫—É –∫–æ—Ç–æ—Ä—ã–π —Å–ø—Ä–∞—à–∏–≤–∞–ª
  void messageLady() {
    if (result == null) return;
    TelegramSendMessage(playerLady.userData,
        "$answerPlayer –æ—Ç–≤–µ—Ç–∏–ª –í–∞–º\\, —á—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ ${result! ? "–°–∏–ª–∞–º –î–æ–±—Ä–∞\\! üîÜ" : "–°–∏–ª–∞–º –ó–ª–∞\\! ‚ÄºÔ∏è"}",
        replyMarkup: Buttons.delete);
  }

  @override
  String get resultString =>
      "üßú‚Äç‚ôÄÔ∏è $playerLady —É–∑–Ω–∞–ª –∫ –∫–∞–∫–æ–π —Å—Ç–æ—Ä–æ–Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∏–≥—Ä–æ–∫ $answerPlayer\\. –†—É—Å–∞–ª–∫–∞ üßú‚Äç‚ôÄÔ∏è\\, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –∏–≥—Ä–æ–∫—É $answerPlayer";

  @override
  String generateMessage(Player player) {
    return "üßú‚Äç‚ôÄÔ∏è $playerLady —Ö–æ—á–µ—Ç —É–∑–Ω–∞—Ç—å –∫ –∫–∞–∫–æ–π —Å—Ç–æ—Ä–æ–Ω–µ –í—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç–µ";
  }

  @override
  InlineKeyboardMarkup generateButton(Player player) {
    return Buttons.gameLadyAnswer(player.role.ladyAnswers);
  }

  @override
  void callback(Player player, String command, List<String> params) {
    bool bResult = true;

    switch (command) {
      case '#LadyAnswer+':
        bResult = true;
        break;

      case '#LadyAnswer-':
        bResult = false;

        break;

      default:
        reSendSecondMessage(player);
        return;
    }

    if (!answerPlayer.role.ladyAnswers.contains(bResult)) {
      reSendSecondMessage(player);
      return;
    }

    deleteSecondMessage(player);
    result = bResult;
    messageLady();
    completeThisTurn();
    game.nextTurn(ignoreSendPlayer: [playerLady]);
  }
}

/// –°–∞–º –ø–æ—Ö–æ–¥
class Quest extends Turn {
  final bool twoFail;
  int countFails = 0;
  bool result = true;
  Map<Player, bool> quest = {};
  final List<Player> questPlayers;
  final Player turnPlayer;
  int countArthur = 0;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
  void initUpdateMainMessage() {
    int viewLeftPlayers = actionsPlayers.length;

    Future.doWhile(() async {
      if (viewLeftPlayers != actionsPlayers.length) {
        viewLeftPlayers = actionsPlayers.length;
        if (viewLeftPlayers != 0) {
          game.playersRefreshMessage();
        }
      }

      await Future.delayed(Duration(seconds: 2));
      return actionsPlayers.isNotEmpty;
    });
  }

  Quest(super.game, this.turnPlayer, this.questPlayers,
      {this.twoFail = false}) {
    actionsPlayers = questPlayers.toList();

    initUpdateMainMessage();
  }

  String get questResult {
    String msg = "";
    if (twoFail && countFails == 1) {
      msg += '‚úÖ \\[‚ùå\\]';
    } else if (countFails == 0) {
      msg += '‚úÖ';
    } else {
      for (int i = 0; i < countFails; i++) {
        msg += '‚ùå';
      }
    }
    for (int i = 0; i < countArthur; i++) {
      msg += " üëë";
    }
    return msg;
  }

  @override
  String get resultString {
    String msg =
        "–ü–æ—Ö–æ–¥ –æ—Ç ${turnPlayer.url} \\, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Ö–æ–¥–∞\\:$questResult\n";
    msg += "–£—á–∞—Å—Ç–≤–æ–≤–∞–≤—à–∏–µ –∏–≥—Ä–æ–∫–∏\\:\n";
    msg += questPlayers.join("\\, ");
    // for (var onePlayer in questPlayers) {
    //   msg += onePlayer.url;
    //   msg += "\\, ";
    // }
    return msg;
  }

  @override
  String get messageChat {
    String msg = "–û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ—Ö–æ–¥–∞\\:\n";
    msg += questPlayers.join("\\, ");
    msg += "\n\n –û—Å—Ç–∞–≤—à–∏–µ—Å—è –∏–≥—Ä–æ–∫–∏\\:\n${actionsPlayers.join("\\, ")}";
    return msg;
  }

  @override
  String generateMessage(Player player) {
    String msg = "–í—ã –≤ –ø–æ—Ö–æ–¥–µ\\! –í–º–µ—Å—Ç–µ —Å –≤–∞–º–∏ –∏–≥—Ä–æ–∫–∏\\:\n";

    for (var onePlayer
        in questPlayers.where((curPlayer) => curPlayer != player)) {
      msg += '${onePlayer.url}\n';
    }

    msg += "\n–í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ\\: ";
    return msg;
  }

  @override
  InlineKeyboardMarkup generateButton(Player player) {
    List<bool> variable = player.role.questAnswers;
    variable.shuffle();
    return Buttons.gameVoteQuest(variable);
  }

  @override
  void callback(Player player, String command, List<String> params) {
    late bool answerPlayer;
    switch (command) {
      case "#VoteQuest-":
        answerPlayer = false;
        break;

      case '#VoteQuest+':
        answerPlayer = true;
        break;

      default:
        reSendSecondMessage(player);
        return;
    }

    if (!player.role.questAnswers.contains(answerPlayer)) {
      reSendSecondMessage(player);
      return;
    }

    //  –û–±–æ–∑–Ω–∞—á–∞–µ–º —á—Ç–æ –∫–æ—Ä–æ–ª—å —Ö–æ–¥–∏–ª –≤ –ø–æ—Ö–æ–¥
    if (player.role is Arthur) {
      (player.role as Arthur).bRunQuest = true;
      countArthur++;
    }

    quest[player] = answerPlayer;
    actionsPlayers.remove(player);
    deleteSecondMessage(player);

    if (actionsPlayers.isEmpty) {
      completeThisTurn();
      return;
    }

    // game.playersRefreshMessage();
  }

  @override
  void completeThisTurn() {
    super.completeThisTurn();
    quest.forEach((key, value) {
      if (!value) countFails++;
    });

    result = countFails <= (twoFail ? 1 : 0);

    game.quests.add(this);
    game.nextTurn();
  }
}

/// –ò–≥—Ä–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç –∫—Ç–æ –ø–æ–π–¥–µ—Ç –≤ –ø–æ—Ö–æ–¥
class Invite extends Turn {
  final Player turnPlayer;
  List<Player> invatedPlayers = [];
  final int countPlayers;
  VoteInvite? voteInvite;
  final bool twoFails;

  Invite(super.game, this.turnPlayer, this.countPlayers,
      {this.twoFails = false}) {
    actionsPlayers = [turnPlayer];
  }

  @override
  String get resultString =>
      "$turnPlayer –Ω–∞–∑–Ω–∞—á–∞–µ—Ç —Å–æ—Å—Ç–∞–≤ –∏–∑ ${Msg.digitEmoji[countPlayers]} —á–µ–ª–æ–≤–µ–∫\\.";

  @override
  void callback(Player player, String command, List<String> params) {
    switch (command) {
      case "#reset":
        invatedPlayers.clear();
        break;

      case "#accept":
        if (invatedPlayers.length == countPlayers) {
          deleteSecondMessage(player);
          completeThisTurn();
          return;
        }
        break;

      case "#gameSelectInviteQuest":
        int count = int.parse(params[0]);
        Player countPlayer = game.players[count];
        if (!invatedPlayers.contains(countPlayer) &&
            invatedPlayers.length < countPlayers) {
          invatedPlayers.add(countPlayer);
        }
        break;
    }

    refreshSecondMessage(player);
  }

  @override
  InlineKeyboardMarkup generateButton(Player player) {
    // –ï—Å–ª–∏ —É–∂–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if (invatedPlayers.length == countPlayers) {
      return InlineKeyboardMarkup(inlineKeyboard: [
        Buttons.gameAccept.inlineKeyboard[0],
        Buttons.gameReset.inlineKeyboard[0]
      ]);
    }

    //  –û—Å—Ç–∞–≤—à–∏–µ—Å—è –∏–≥—Ä–æ–∫–∏
    List<Player> leftPlayer = game.players.where((onePlayer) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ—Ä–æ–ª—è –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Ö–æ–¥–∏–ª
      if (onePlayer.role is Arthur) {
        if ((onePlayer.role as Arthur).bRunQuest) return false;
      }

      if (invatedPlayers.contains(onePlayer)) {
        return false;
      } else {
        return true;
      }
    }).toList();

    return GenerateButtons.fromPlayers(
        players: leftPlayer,
        startStringCallback: "#gameSelectInviteQuest",
        convertCallback: (p) => "${p.index}",
        endCommands: Buttons.gameReset.inlineKeyboard);
  }

  @override
  String generateMessage(Player player) {
    String message = "";

    if (invatedPlayers.isEmpty) {
      return "–í—ã–±–µ—Ä–∏—Ç–µ $countPlayers\\ –∏–≥—Ä–æ–∫–æ–≤\\, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–π–¥—É—Ç –≤ –ø–æ—Ö–æ–¥\\?";
    }

    message +=
        "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ ${invatedPlayers.length} –∏–∑ $countPlayers \\:\n";
    for (var onePlayer in invatedPlayers) {
      message += "${onePlayer.url}\n";
    }

    return message;
  }

  @override
  void completeThisTurn() {
    super.completeThisTurn();
    invatedPlayers.sort((a, b) => a.index - b.index);
    voteInvite =
        VoteInvite(game, turnPlayer, invatedPlayers, twoFails: twoFails);
    game.nextTurn(newTurn: voteInvite, sendResult: false);
  }

  @override
  String get messageChat =>
      "$turnPlayer –≤—ã–±–∏—Ä–∞–µ—Ç ${Msg.digitEmoji[countPlayers]} –∏–≥—Ä–æ–∫–æ–≤ –≤ –ø–æ—Ö–æ–¥";
}

/// –ò–≥—Ä–æ–∫–∏ –≥–æ–ª–æ—Å—É—é—Ç –∑–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π —Å–æ—Å—Ç–∞–≤
class VoteInvite extends Turn {
  final List<Player> playersQuest;
  Map<Player, bool> playersVote = {};
  final bool twoFails;
  Player turnPlayer;
  Quest? quest;
  int countAgree = 0;
  int countNotAgree = 0;

  VoteInvite(super.game, this.turnPlayer, this.playersQuest,
      {this.twoFails = false}) {
    actionsPlayers = game.players.toList();

    initUpdateMainMessage();
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
  void initUpdateMainMessage() {
    int viewLeftPlayers = actionsPlayers.length;

    Future.doWhile(() async {
      if (viewLeftPlayers != actionsPlayers.length) {
        viewLeftPlayers = actionsPlayers.length;
        if (viewLeftPlayers != 0) {
          game.playersRefreshMessage();
        }
      }

      await Future.delayed(Duration(seconds: 2));
      return actionsPlayers.isNotEmpty;
    });
  }

  @override
  String get resultString {
    String msg = "${turnPlayer.userData.url} –Ω–∞–∑–Ω–∞—á–∏–ª —Å–æ—Å—Ç–∞–≤\\:\n";
    msg += playersQuest.toString();
    // for (var onePlayer in playersQuest) {
    //   msg += '${onePlayer.url}\\, ';
    // }
    msg += "\n–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è\\:\n";

    msg += game.players
        .map<String>(
            (pl) => "${pl.index + 1}\\:${playersVote[pl]! ? '‚úÖ' : 'üö´'}")
        .toList()
        .toString();

    msg += quest != null
        ? "\n –°–æ—Å—Ç–∞–≤ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω\\!"
        : "\n –°–æ—Å—Ç–∞–≤ –Ω–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω\\! –•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É\\.";

    return msg;
  }

  @override
  String get messageChat =>
      "${turnPlayer.userData.url} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–æc—Ç–∞–≤\\:\n${playersQuest.join("\\, ")}\n–ò–¥–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ\\.\\.\\.\n–û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤\\:\n ${actionsPlayers.join("\\, ")}";

  @override
  String generateMessage(Player player) {
    String msg = "${turnPlayer.userData.url} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–æc—Ç–∞–≤\\:\n";
    for (var onePlayer in playersQuest) {
      msg += "${onePlayer.url}\n ";
    }
    msg += "\n–í–∞—à –≥–æ–ª–æ—Å –∑–∞ —ç—Ç–æ—Ç —Å–æ—Å—Ç–∞–≤\\:";
    return msg;
  }

  @override
  InlineKeyboardMarkup generateButton(Player player) {
    return Buttons.gameVoteInvite;
  }

  @override
  void callback(Player player, String command, List<String> params) {
    late bool answer;
    switch (command) {
      case '#VoteInvite+':
        answer = true;
        break;

      case '#VoteInvite-':
        answer = false;
        break;

      default:
        reSendSecondMessage(player);
        return;
    }

    playersVote[player] = answer;
    actionsPlayers.remove(player);
    deleteSecondMessage(player);

    if (actionsPlayers.isEmpty) {
      completeThisTurn();
      return;
    }

    // game.playersRefreshMessage();
  }

  @override
  void completeThisTurn() {
    super.completeThisTurn();
    playersVote.forEach((key, value) {
      if (value) {
        countAgree++;
      } else {
        countNotAgree++;
      }
    });

    if (countAgree > countNotAgree) {
      quest = Quest(game, turnPlayer, playersQuest);
      game.nextTurn(newTurn: quest);
    } else {
      game.nextTurn();
    }
  }
}

/// –ü–æ–∏—Å–∫ –ú–µ—Ä–ª–∏–Ω–∞, –ø—Ä–∏ –ø–æ–±–µ–¥–µ –¥–æ–±—Ä–∞
class SearchMerlin extends Turn {
  late Player? playerAssasin;
  Player? playerMerlin;

  SearchMerlin(super.game) {
    Player? searchPlayer = game.searchPlayerFromRole<Assasin>();
    searchPlayer ??= game.searchPlayerFromRole<Evil>();

    if (searchPlayer == null) {
      game._endGame(true, text: "–°–∏–ª –ó–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\\!");
      playerAssasin = null;
      return;
    }

    playerAssasin = searchPlayer;

    actionsPlayers = [searchPlayer];
  }

  @override
  String get resultString => playerMerlin is Merlin
      ? "–°–∏–ª—ã —Ç—å–º—ã —É–≥–∞–¥–∞–ª–∏ –ú–µ—Ä–ª–∏–Ω–∞\\!"
      : "–°–∏–ª–∞–º —Ç—å–º—ã –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≥–∞–¥–∞—Ç—å –ú–µ—Ä–ª–∏–Ω–∞\\";

  @override
  String get messageChat => "${playerAssasin?.url} –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –ú–µ—Ä–ª–∏–Ω–∞";

  @override
  String generateMessage(Player player) {
    if (playerMerlin == null) {
      return "–ö—Ç–æ –ø–æ –í–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é —è–≤–ª—è–µ—Ç—Å—è –ú–µ—Ä–ª–∏–Ω–æ–º\\?";
    } else {
      return "–í—ã –¥—É–º–∞–µ—Ç–µ –ú–µ—Ä–ª–∏–Ω–æ–º —è–≤–ª—è–µ—Ç—Å—è –∏–≥—Ä–æ–∫ $playerMerlin\\?";
    }
  }

  @override
  InlineKeyboardMarkup generateButton(Player player) {
    if (playerMerlin == null) {
      return GenerateButtons.fromPlayers(
          players: game.players
              .where((pl) => (pl.role is Good && pl.role is! Arthur)),
          startStringCallback: "#merlinIs",
          convertCallback: (pl) => "${pl.index}");
    } else {
      return InlineKeyboardMarkup(inlineKeyboard: [
        Buttons.gameAccept.inlineKeyboard[0],
        Buttons.gameReset.inlineKeyboard[0]
      ]);
    }
  }

  @override
  void callback(Player player, String command, List<String> params) {
    switch (command) {
      case '#merlinIs':
        playerMerlin = game.players[int.parse(params[0])];
        break;

      case "#reset":
        playerMerlin = null;
        break;

      case "#accept":
        if (playerMerlin == null) {
          reSendSecondMessage(player);
          return;
        }
        deleteSecondMessage(player);
        if (playerMerlin!.role is Merlin) {
          completeThisTurn();
          game._endGame(false,
              text:
                  "–°–∏–ª—ã –°–≤–µ—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ 3 —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ—Ö–æ–¥–∞\\.\n–û–¥–Ω–∞–∫–æ –°–∏–ª—ã –¢—å–º—ã –≤—ã–π–≥—Ä–∞–ª–∏\\, —É–≥–∞–¥–∞–≤ –ú–µ—Ä–ª–∏–Ω–∞ ${playerMerlin!.url} \\!");
          return;
        } else {
          completeThisTurn();
          game._endGame(true,
              text:
                  "–°–∏–ª—ã –°–≤–µ—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ 3 —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ—Ö–æ–¥–∞\\.\n–°–∏–ª—ã –ó–ª–∞ –æ—à–∏–±–ª–∏—Å—å\\, –ø–æ—Å—á–∏—Ç–∞–≤\\, —á—Ç–æ –ú–µ—Ä–ª–∏–Ω–æ–º —è–≤–ª—è–µ—Ç—Å—è\\, ${playerMerlin!.url} \\.");
          return;
        }
    }
    refreshSecondMessage(player);
  }
}

/// –ò–≥—Ä–∞
class AvGame {
  /// –ö–æ–¥ –ò–≥—Ä—ã
  String gameCode;

  /// –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã
  DateTime createDateTime = DateTime.now();

  /// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
  List<UserData> invitedUserData = [];

  /// –í—Å–µ –∏–≥—Ä–æ–∫–∏
  List<Player> players = [];
  GameSettings get settings => _gameSettings[players.length < 5
      ? 5
      : players.length > 12
          ? 12
          : players.length]!;

  int countSkipInvite = 0;

  /// –ê–¥–º–∏–Ω–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–≥—Ä—ã
  late UserData adminUserData;

  /// –í–∫–ª—é—á–µ–Ω–∞ –ª–∏ —Ä—É—Å—Å–∞–ª–∫–∞
  bool bLady = false;

  /// –ò–≥—Ä–æ–∫ —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä—É—Å—Å–∞–ª–∫–∞
  Player? ladyPlayer;

  /// –¢–µ–∫—É—â–∏–π —Ö–æ–¥
  Turn? turn;

  /// –ö–∞–∫–æ–π –ø–æ —Å—á–µ—Ç—É —Ö–æ–¥
  int get countTurn => quests.length;

  /// –ò–Ω–¥–µ–∫—Å –∏–≥—Ä–æ–∫–∞ —á–µ–π —Ö–æ–¥
  int countTurnPlayer = 0;

  /// –ù–∞—á–∞—Ç–∞ –ª–∏ –ò–≥—Ä–∞
  bool bStart = false;

  /// –ü–æ—Ö–æ–¥—ã
  List<Quest> quests = [];

  /// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
  List<Turn> complitedTurns = [];

  ///  –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –¥–æ–±—Ä–∞
  List<Good> goodRoles = [];

  /// –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –∑–ª–∞
  List<Evil> evilRoles = [];

  /// –î–µ–π—Å—Ç–≤—É—é—â–∏–µ —Ä–æ–ª–∏ –≤ –∏–≥—Ä–µ
  List<Role> roles = [];

  String get stringMoreInformation {
    if (bStart == false) {
      return _generateLobbyMessage;
    }

    String msg = '';

    if (quests.isNotEmpty) {
      msg += "–°–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–æ—Ö–æ–¥—ã\\:\n\n";

      for (var oneQuest in quests) {
        msg +=
            " ${oneQuest.turnPlayer.url} –Ω–∞–∑–Ω–∞—á–∏–ª ${Msg.digitEmoji[oneQuest.questPlayers.length]} —á–µ–ª–æ–≤–µ–∫\\.";
        msg +=
            "\n–†–µ–∑—É–ª—å—Ç–∞—Ç\\: ${oneQuest.questResult}\n–£—á–∞—Å—Ç–≤–æ–≤–∞—à–∏–µ –∏–≥—Ä–æ–∫–∏\\:\n";

        for (var onePlayer in oneQuest.questPlayers) {
          msg += " üî∏ ${onePlayer.url} \n";
        }
        msg += "\n";
      }
    }

    msg += "\n–†–æ–ª–∏ –¥–æ–±—Ä–∞\\:\n";
    for (var good in goodRoles) {
      msg += "${good.toString()} \\,  ";
    }

    msg += "\n–†–æ–ª–∏ –∑–ª–∞\\:\n";
    for (var evil in evilRoles) {
      msg += "${evil.toString()} \\,  ";
    }

    msg += '\n–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π\\:\n\n';

    for (var oneTurn in complitedTurns) {
      msg += "${oneTurn.resultString}\n\n";
    }

    msg += "\n–°–µ–π—á–∞—Å\\:\n";
    msg += turn!.messageChat;
    return msg;
  }

  String get gameMainMessage {
    if (bStart) {
      return _generateGameMessage;
    } else {
      return _generateLobbyMessage;
    }
  }

  String get _generateGameMessage {
    String msg = "";

    for (var onePlayer in players) {
      if (onePlayer == ladyPlayer && onePlayer.isTurn) {
        msg += "üßú‚Äç‚ôÄÔ∏èüö©";
      } else if (onePlayer == ladyPlayer) {
        msg += 'üßú‚Äç‚ôÄÔ∏è';
      } else if (onePlayer.isTurn) {
        msg += 'üö©';
      } else {
        msg += "‚ñ´Ô∏è";
      }
      msg += onePlayer.url;
      msg += "\n";
    }

    msg += "\n–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–∞–≤—ã\\:\n";
    for (int i = 0; i < 4; i++) {
      msg += countSkipInvite > i ? "üî¥" : "‚ö™Ô∏è";
    }
    msg += "‚ÄºÔ∏è";

    msg += "\n\n–ü–æ—Ö–æ–¥—ã\\:\n";

    for (int i = 0; i < 5; i++) {
      if (countTurn == i) {
        msg += "‚û°Ô∏è";
      } else {
        msg += "‚ñ´Ô∏è";
      }

      msg += ' ${Msg.digitEmoji[settings.playersInTurn[i]]} ';
      if (i == 3 && settings.twoFail) {
        msg += "‚ùóÔ∏è";
      } else {
        msg += "‚ñ´Ô∏è";
      }
      if (quests.length > i) {
        msg += quests[i].questResult;
        msg += " ";
        msg += quests[i]
            .questPlayers
            .map<int>((player) => player.index + 1)
            .join('\\, ');
      } else {
        msg += "üî≤";
      }
      msg += "\n";
    }

    msg += "\n–†–æ–ª–∏ –¥–æ–±—Ä–∞\\:\n";
    msg += goodRoles.map<String>((e) => e.emoji).join(' ');

    msg += "\n–†–æ–ª–∏ –∑–ª–∞\\:\n";
    msg += evilRoles.map<String>((e) => e.emoji).join(' ');

    msg += "\n\n–°–µ–π—á–∞—Å\\:\n";
    msg += turn!.messageChat;
    return msg;
  }

  String get _generateLobbyMessage {
    String message =
        "–í—ã –≤ –∫–æ–º–Ω–∞—Ç–µ `${gameCode}`\\.\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${adminUserData.url} \n";

    message += "–ò–≥—Ä–æ–∫–∏:\n";

    int countLady = 0;

    if (bLady) {
      countLady = (countTurnPlayer + players.length - 1) % players.length;
    } else {
      countLady = -1;
    }

    for (int i = 0; i < players.length; i++) {
      if (i == countLady) {
        message += 'üßú‚Äç‚ôÄÔ∏è';
      } else if (i == countTurnPlayer) {
        message += 'üö©';
      } else {
        message += '‚ñ´Ô∏è';
      }
      message += "${players[i].url} \n";
    }

    if (invitedUserData.isNotEmpty) {
      message += "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–∏—è:\n";
      for (var inviteUserData in invitedUserData) {
        message += "${inviteUserData.url}\n";
      }
    }

    message += "\n–†–æ–ª–∏ –¥–æ–±—Ä–∞:\n";
    message += goodRoles.join("\\, ");

    // message += _game.goodRoles.toString();
    message += "\n–†–æ–ª–∏ –∑–ª–∞:\n";
    message += evilRoles.join("\\, ");

    // message += _game.evilRoles.toString();

    return message;
  }

  static Map<int, GameSettings> get gameSettings => _gameSettings;

  // –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã –∏ –∫–æ–¥–æ–º
  AvGame(this.adminUserData, this.gameCode);

  void start() {
    if (bStart) {
      return;
    }

    if (players.length < 5) {
      TelegramSendMessage(
          adminUserData, "–í –∏–≥—Ä–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 5 –∏–≥—Ä–æ–∫–æ–≤",
          replyMarkup: Buttons.delete);
      return;
    }
    if (players.length > 12) {
      TelegramSendMessage(
          adminUserData, "–í –∏–≥—Ä–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 12 –∏–≥—Ä–æ–∫–æ–≤",
          replyMarkup: Buttons.delete);
      return;
    }

    // –ï—Å–ª–∏ –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É–±–∏—Ä–µ–º —É –Ω–∏—Ö —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–≥—Ä—É
    for (UserData inviteUserData in invitedUserData) {
      inviteUserData.inviteGame = null;
    }

    invitedUserData.clear();

    countSkipInvite = 0;
    bStart = true;

    roles.addAll(goodRoles);
    roles.addAll(evilRoles);

    for (int i = 0; i < 5; i++) {
      roles.shuffle();
    }

    if (bLady) {
      int indexLady =
          countTurnPlayer == 0 ? players.length - 1 : countTurnPlayer - 1;
      ladyPlayer = players[indexLady];
    }

    // –†–∞–∑–¥–∞–µ–º —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞–º
    for (int i = 0; i < players.length; i++) {
      players[i].role = roles[i];
    }

    for (var onePlayer in players) {
      TelegramSendMessage(onePlayer.userData, onePlayer.roleMessage(),
          replyMarkup: Buttons.delete);
    }

    nextTurn(reSendMain: true);
  }

  // –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  void reCreateGame() {
    // –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏–∑ –º–∞—Å—Å–∏–≤–∞ –∏–≥—Ä
    AvGameController.codeGames.remove(gameCode);
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
      
    gameCode = Utils.uniquieRandomRoomCode();
    // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–≥—Ä—É –ø–æ–¥ –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º
    AvGameController.codeGames[gameCode] = this;

    // –ï—Å–ª–∏ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã –∫–∞–∫–∏–µ —Ç–æ –∏–≥—Ä–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —É–¥–∞–ª—è–µ–º
    if (turn != null) {
      for (var onePlayer in turn!.actionsPlayers) {
        turn!.deleteSecondMessage(onePlayer);
      }
    }

    // –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≥–∞—à–µ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    for (UserData inviteUserData in invitedUserData) {
      inviteUserData.inviteGame = null;
    }

    // –ß–∏—Å—Ç–∏–º –≤—Å–µ –∏–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    quests.clear();
    roles.clear();
    complitedTurns.clear();
    ladyPlayer = null;
    turn = null;
    bStart = false;
    invitedUserData.clear();

    //–ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ä–æ–ª–∏ –¥–æ–±—Ä–∞, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –≤ –Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    for (int i = 0; i < goodRoles.length; i++) {
      goodRoles[i] =
          Role.fromName(goodRoles[i].name, this) as Good;
    }

    //–ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ä–æ–ª–∏ –ó–ª–∞, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –≤ –Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    for (int i = 0; i < evilRoles.length; i++) {
      evilRoles[i] =
          Role.fromName(evilRoles[i].name, this) as Evil;
    }

    // –û—á–∏—â–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä–æ–∫–∞
    for (var onePlayer in players) {
      onePlayer.role = Role(this);
      onePlayer.ladyAnswer = null;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
    createDateTime = DateTime.now();

    playersRefreshMessage(reSend: true);
  }

  void nextTurn(
      {Turn? newTurn,
      bool sendResult = true,
      List<Player>? ignoreSendPlayer,
      bool reSendMain = false}) {
    if (turn == null) {
      turn = Invite(
          this, players[countTurnPlayer], settings.playersInTurn[countTurn]);
      playersRefreshMessage(reSend: reSendMain);
      turn!.initAllMessages();
      return;
    }

    if (sendResult) {
      messageAllPlayers(turn!.resultString, playersIgnore: ignoreSendPlayer);
    }

    complitedTurns.add(turn!);

    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    if (newTurn != null) {
      turn = newTurn;
      playersRefreshMessage(reSend: reSendMain);
      turn!.initAllMessages();
      return;
    }

    // –ï—Å–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –±—ã–ª–æ –≥–æ–ª–æ—Å–≤–∞–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –æ–Ω–æ –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å
    if (turn is VoteInvite) {
      countSkipInvite++;
      if (countSkipInvite >= 5) {
        _endGame(false, text: "–°–æ—Å—Ç–∞–≤ –ø–æ—Ö–æ–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω 5 —Ä–∞–∑\\!");
        return;
      }
    }

    // –ï—Å–ª–∏ –±—ã–ª –∫–≤–µ—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–≤–∞–Ω–∏–µ, —Ö–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
    if (turn is Quest || turn is VoteInvite) {
      countTurnPlayer = ++countTurnPlayer % players.length;
    }

    if (turn is Quest) {
      countSkipInvite = 0;
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—Ö–∏ –∏ –ø—Ä–æ–≤–∞–ª—ã
      int countSuccess = 0;
      int countFail = 0;

      for (var oneQuest in quests) {
        if (oneQuest.result) {
          countSuccess++;
        } else {
          countFail++;
        }
      }

      // –ï—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å 3 –º—è —É—Å–ø–µ—Ö–∞–º–∏
      if (countSuccess >= 3) {
        if (searchPlayerFromRole<Merlin>() != null) {
          turn = SearchMerlin(this);
          playersRefreshMessage(reSend: reSendMain);
          turn!.initAllMessages();
          return;
        } else {
          _endGame(true, text: "–°–∏–ª—ã —Å–≤–µ—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ 3 —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ—Ö–æ–¥–∞\\!");
        }
        return;
      }

      // –ï—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å 3 –º—è —Ñ–µ–π–ª–∞–º–∏
      if (countFail >= 3) {
        _endGame(false, text: "–°–∏–ª—ã –¢—å–º—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ 3 –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö –ø–æ—Ö–æ–¥–∞\\!");
        return;
      }

      // –ï—Å–ª–∏ —Ö–æ–¥ —Ä—É—Å–∞–ª–∫–∏
      if (bLady && countTurn >= 2) {
        turn = LadyAsk(this);
        playersRefreshMessage(reSend: reSendMain);
        turn!.initAllMessages();
        return;
      }
    }
    turn = Invite(
        this, players[countTurnPlayer], settings.playersInTurn[countTurn],
        twoFails: countTurn == 3 ? settings.twoFail : false);
    playersRefreshMessage(reSend: reSendMain);
    turn!.initAllMessages();
  }

  void _endGame(bool result, {String? text}) {
    String msg = "";
    msg +=
        "–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞ –ø–æ–±–µ–¥–æ–π ${result ? "–°–∏–ª –î–æ–±—Ä–∞\\! üîÜ" : "–°–∏–ª –ó–ª–∞\\! ‚ÄºÔ∏è"}\n\n";
    if (text != null) {
      msg += text;
      msg += "\n\n";
    }
    msg += "–†–æ–ª–∏ –∏–≥—Ä–æ–∫–æ–≤\\:\n\n";
    for (var onePlayer in players) {
      msg +=
          "${onePlayer.role is Good ? "üîÜ" : "‚ÄºÔ∏è"} ${onePlayer.url} \\( ${onePlayer.role.toString()} \\)\n";
    }

    for (var onePlayer in players) {
      bool isWin = (onePlayer.role is Good) == (result);
      TelegramSendMessage(onePlayer.userData,
          "${isWin ? "–í—ã –≤—ã–π–≥—Ä–∞–ª–∏\\! ü•≥" : "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏\\! üòí"} \n$msg",
          replyMarkup: Buttons.delete);
    }

    reCreateGame();
  }

  // –ó–∞–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
  Future<void> changeAdministrator(UserData newAdminUserData) async {
    UserData oldAdministrator = adminUserData;
    adminUserData = newAdminUserData;

    AvGameController.refreshUser(oldAdministrator);

    AvGameController.refreshUser(newAdminUserData);

    TelegramSendMessage(
        adminUserData, "–¢–µ–ø–µ—Ä—å –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–æ–º–Ω–∞—Ç—ã $gameCode",
        replyMarkup: Buttons.delete);
  }

  /// –í–∫–ª—é—á–∏—Ç—å/ –í—ã–∫–ª—é—á–∏—Ç—å —Ä—É—Å–∞–ª–∫—É
  void changeLady() {
    // –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if (bStart) return;

    bool oldbLady = bLady;

    // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ 2 –∏–ª–∏ –º–µ–Ω—å—à–µ —Ç–æ —Ä—É—Å–∞–ª–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–Ω–∞, –∏–Ω–∞—á–µ –º–µ–Ω—è–µ–º –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ
    if (players.length <= 2) {
      bLady = false;
    } else {
      bLady = !bLady;
    }

    // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–æ–ª–æ—Å—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (oldbLady != bLady) {
      playersRefreshMessage();
    }
  }

  /// –°–º–µ–Ω–∏—Ç—å –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
  void changeFirstPlayer(int count) {
    // –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if (bStart) return;

    // –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤—Ç–∞–ª—è –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ
    if (count >= players.length) return;

    countTurnPlayer = count;
    playersRefreshMessage();
  }

  /// –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Id
  Player addUser(UserData userData) {
    if (bStart) throw "Game is started";

    var player = Player(this, userData);
    players.add(player);
    regenerateRole(players.length);
    playersRefreshMessage(ignorePlayers: [player]);
    return player;
  }

  /// TODO: –£–±—Ä–∞—Ç—å
  /// –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–≤–æ–≥–æ –±–æ—Ç–∞
  void addTestBot(UserData userData) {
    if (bStart) return;

    BotUserData bot = BotUserData(userData.chatId,
        name: Utils.generateRandomName());

    botsUser[bot.userId] = bot;
    var player = Player(this, bot);
    players.add(player);
    bot.player = player;
    regenerateRole(players.length);
    playersRefreshMessage(ignorePlayers: [player]);
  }

  /// –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
  Future<void> deletePlayerFromIndex(int index, {bool isKick = false}) async {
    if (bStart) return;
    if (index > 0 || index < players.length) {
      return deletePlayer(players[index], isKick: isKick);
    }
  }

  Future<void> deletePlayer(Player player, {bool isKick = false}) async {
    if (!players.contains(player)) return;

    if (player.index == countTurnPlayer) {
      countTurnPlayer = 0;
    }

    players.remove(player);

    if (players.length < 4) bLady = false;

    playersRefreshMessage();

    UserData userData = player.userData;
    userData.player = null;

    await AvGameController.refreshUser(userData);

    if (isKick) {
      TelegramSendMessage(userData, '–í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∏–≥—Ä—ã $gameCode',
          replyMarkup: Buttons.delete);
    }

    if (players.isEmpty) {
      deleteGame();
      return;
    }

    if (player.isAdmin) {
      changeAdministrator(players[0].userData);
    }
  }

  void deleteGame() {
    messageAllPlayers("–ò–≥—Ä–∞ $gameCode –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞");

    // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä
    AvGameController.codeGames.remove(gameCode);

    if (turn != null) {
      for (var onePlayer in turn!.actionsPlayers) {
        turn!.deleteSecondMessage(onePlayer);
      }
    }

    //–£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (var player in players) {
      player.userData.player = null;
      AvGameController.refreshUser(player.userData);
    }

    for (var invitedUserData in invitedUserData) {
      invitedUserData.inviteGame = null;
    }

    players.clear();
    invitedUserData.clear();
    roles.clear();
  }

  /// –ü–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
  Future<void> messageAllPlayers(String text,
      {List<Player>? playersIgnore}) async {
    for (var onePlayer in players) {
      if (playersIgnore == null) {
        TelegramSendMessage(onePlayer.userData, text,
            replyMarkup: Buttons.delete);
      } else if (!playersIgnore.contains(onePlayer)) {
        TelegramSendMessage(onePlayer.userData, text,
            replyMarkup: Buttons.delete);
      }
    }
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
  void playersRefreshMessage(
      {List<Player>? ignorePlayers, bool reSend = false}) {
    for (var player in players) {
      //if (player.userData is BotUserData) continue;
      if (ignorePlayers == null) {
        AvGameController.refreshUser(player.userData, reSend: reSend);
      } else if (!ignorePlayers.contains(player)) {
        AvGameController.refreshUser(player.userData, reSend: reSend);
      }
    }
  }

  /// –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –º–∞—Å—Å–∏–≤—É —É–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  void changeIndexFromUserData(List<UserData> userDataList) {
    if (bStart) {
      return;
    }

    if (players.length != userDataList.length) {
      return;
    }

    for (Player player in players) {
      if (!userDataList.contains(player.userData)) {
        return;
      }
    }

    players = userDataList.map((oneUserData) => oneUserData.player!).toList();
    countTurnPlayer = 0;
    playersRefreshMessage();
  }

  /// –ü–µ—Ä–µ–≥–µ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–æ–ª–∏
  void regenerateRole(int countPlayer) {
    var rolesss = generateDefaultRole(countPlayer);
    goodRoles = rolesss.$1;
    evilRoles = rolesss.$2;
  }

  (List<Good>, List<Evil>) generateDefaultRole(int countPlayer) {
    if (countPlayer < 5) countPlayer = 5;
    if (countPlayer > 12) countPlayer = 12;

    switch (countPlayer) {
      case (5):
        return (
          [Merlin(this), Persival(this), Good(this)],
          [Morgan(this), Assasin(this)]
        );

      case (6):
        return (
          [Merlin(this), Persival(this), Good(this), Good(this)],
          [Morgan(this), Assasin(this)]
        );

      case (7):
        return (
          [Merlin(this), Persival(this), Good(this), Good(this)],
          [Morgan(this), Assasin(this), Knight(this)]
        );

      case (8):
        return (
          [Merlin(this), Persival(this), Kay(this), Good(this), Good(this)],
          [Morgan(this), Assasin(this), Knight(this)]
        );

      case (9):
        return (
          [
            Merlin(this),
            Persival(this),
            Kay(this),
            Tristan(this),
            Isolde(this),
            Good(this)
          ],
          [Morgan(this), Nimue(this), Morded(this)]
        );

      case (10):
        return (
          [
            Merlin(this),
            Persival(this),
            Kay(this),
            Tristan(this),
            Isolde(this),
            Good(this)
          ],
          [Morgan(this), Nimue(this), Assasin(this), Morded(this)]
        );

      case (11):
        return (
          [
            Merlin(this),
            Persival(this),
            Kay(this),
            Tristan(this),
            Isolde(this),
            Arthur(this),
            Good(this)
          ],
          [Morgan(this), Nimue(this), Assasin(this), Morded(this)]
        );

      case (12):
        return (
          [
            Merlin(this),
            Persival(this),
            Kay(this),
            Tristan(this),
            Isolde(this),
            Arthur(this),
            Good(this)
          ],
          [Morgan(this), Nimue(this), Assasin(this), Morded(this), Oberon(this)]
        );

      default:
        return ([], []);
    }
  }

  /// –ù–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ä–æ–ª—å—é
  Player? searchPlayerFromRole<T extends Role>() {
    for (var onePlayer in players) {
      if (onePlayer.role is T) return onePlayer;
    }
    return null;
  }

  /// –ù–∞–π—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Ä–æ–ª—å –≤ —Å–ø–∏—Å–∫–µ —Ä–æ–ª–µ–π
  Role? searchRoleIn<T>(List<Role> roles) {
    for (var oneRole in roles) {
      if (oneRole is T) return oneRole;
    }
    return null;
  }
}
