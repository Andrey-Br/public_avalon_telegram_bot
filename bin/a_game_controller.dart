import 'package:dart_telegram_avalon/admin_users.dart';

import 'a_game.dart';
import 'action_telegram.dart';
import 'generate_buttons.dart';
import 'package:dart_telegram_avalon/inline_buttons.dart';
import 'messages.dart';
import 'package:teledart/model.dart';
import 'roles.dart';
import 'telebot.dart';
import 'users.dart';
import 'utils.dart';

class AvGameController {
  static Map<String, AvGame> codeGames = {};

  /// –ò–Ω–∏—Ü–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
  static void init() {
    _autoDeleteGameInit();
  }

  /// –ò–≥—Ä–æ–∫ –ø–æ–∫–∏–¥–∞–µ—Ç –∫–æ–º–Ω–∞—Ç—É
  static void leaveGame(UserData userData) async {
    if (userData.player == null) {
      TelegramSendMessage(
          userData, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É\\, —Ç–∞–∫ –∫–∞–∫ –≤—ã –Ω–µ –≤ –∏–≥—Ä–µ",
          replyMarkup: Buttons.delete);
      return;
    }

    if (userData.player!.game.bStart) {
      TelegramSendMessage(userData,
          "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É\\, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å\\. –ù–∞–∂–º–∏—Ç–µ /reCreateGame \\, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ\\.",
          replyMarkup: Buttons.delete);
      return;
    }

    await userData.player!.game.deletePlayer(userData.player!);

    TelegramSendMessage(userData, "–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∏–≥—Ä—É",
        replyMarkup: Buttons.delete);
  }

  /// –ò–≥—Ä–æ–∫ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
  static void connectGame(UserData userData, AvGame game) async {
    if (game.bStart) {
      return;
    }

    game.invitedUserData.remove(userData);
    userData.player = game.addUser(userData);
    userData.inviteGame = null;

    refreshUser(userData, reSend: true);

    TelegramSendMessage(
        userData, "–í—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ `${game.gameCode}`\\!",
        replyMarkup: Buttons.delete);
  }

  /// –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É
  static void createGame(UserData userData) async {
    if (userData.player != null) {
      TelegramSendMessage(userData,
          "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É\\, —Ç–∞–∫ –∫–∞–∫ –≤—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∏–≥—Ä–µ",
          replyMarkup: Buttons.delete);
      return;
    }

    if (userData.inviteGame != null) {
      TelegramSendMessage(
          userData, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É\\, —Ç–∞–∫ –∫–∞–∫ –í–∞–º –ø—Ä–∏—à–ª–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ",
          replyMarkup: Buttons.delete);
      return;
    }

    AvGame game = AvGame(userData, Utils.uniquieRandomRoomCode());
    codeGames[game.gameCode] = game;
    userData.player = game.addUser(userData);

    refreshUser(userData, reSend: true);

    TelegramSendMessage(userData,
        "–í—ã —Å–æ–∑–¥–∞–ª–∏ –∏–≥—Ä—É `${game.gameCode}`\\. –í—ã –≤ –Ω–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\\.",
        replyMarkup: Buttons.delete);
  }

  /// –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
  static void acceptInvite(UserData userData) {
    // –ï—Å–ª–∏ —É–∂–µ –≤ –∏–≥—Ä–µ
    if (userData.player != null) {
      TelegramSendMessage(userData,
          "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é \\. –í—ã —É–∂–µ –≤ –∏–≥—Ä–µ \\.",
          replyMarkup: Buttons.delete);
      return;
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–π –∏–≥—Ä—ã
    if (userData.inviteGame == null) {
      TelegramSendMessage(userData, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é",
          replyMarkup: Buttons.delete);
      return;
    }

    // –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å
    if (userData.inviteGame!.bStart) {
      TelegramSendMessage(userData,
          "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é\\. –ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å\\.",
          replyMarkup: Buttons.delete);
      userData.inviteGame = null;
      return;
    }

    AvGame game = userData.inviteGame!;
    connectGame(userData, game);
  }

  /// –û—Ç–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
  static void ignoreInvite(UserData userData) {
    if (userData.inviteGame != null) {
      if (userData.inviteGame!.bStart == false) {
        userData.inviteGame!.invitedUserData.remove(userData);
        userData.inviteGame!.playersRefreshMessage();
      }
    }
    userData.inviteGame = null;
  }

  /// –ü–æ–∏—Å–∫ –∏–≥—Ä—ã –ø–æ –∫–æ–¥—É
  static void searchGameFromCode(UserData userData, String gameCode) {
    if (userData.player != null) {
      TelegramSendMessage(userData,
          "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ\\. –¢–∞–∫ –∫–∞–∫ –í—ã —É–∂–µ –≤ –∏–≥—Ä–µ\\.",
          replyMarkup: Buttons.delete);
      return;
    }

    if (codeGames.containsKey(gameCode) == false) {
      TelegramSendMessage(userData, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–≥—Ä—É `$gameCode`",
          replyMarkup: Buttons.delete);
      return;
    }

    var game = codeGames[gameCode]!;

    if (game.bStart) {
      TelegramSendMessage(userData,
          "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ –∏–≥—Ä–µ `$gameCode`\\, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å",
          replyMarkup: Buttons.delete);
      return;
    }

    connectGame(userData, codeGames[gameCode]!);
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Future<bool> refreshUser(UserData userData,
      {bool reSend = false}) async {
    InlineKeyboardMarkup? replyMarkup = getMainButtonsUser(userData);

    late String text;

    if (userData.player == null) {
      text =
          "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é\\, ${userData.url}\\.\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É *–ê–≤–∞–ª–æ–Ω*\\! üßô‚Äç‚ôÇÔ∏è\n\n${Msg.startInfo}";
    } else {
      text = userData.player!.generateMainMessage();
    }

    var editMainMessage =
        TelegramEditMainMessage(userData, text, replyMarkup, resend: reSend);

    return await editMainMessage.answer;
  }

  /// –ï—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä—ã
  static void refreshSecondMessage(UserData userData) {
    if (userData.player == null) return;
    if (!userData.player!.game.bStart) return;
    if (userData.player!.game.turn == null) return;

    Turn turn = userData.player!.game.turn!;

    if (turn.actionsPlayers.contains(userData.player!)) {
      turn.reSendSecondMessage(userData.player!);
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static InlineKeyboardMarkup? getMainButtonsUser(UserData userData) {
    if (userData.player == null) {
      return Buttons.empty;
    } else {
      return userData.player!.getButtons();
    }
  }

  /// –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
  static void startGame(UserData userData) {
    if (userData.player == null) {
      return;
    }

    if (!userData.player!.isAdmin) {
      return;
    }

    if (userData.player!.game.bStart) {
      return;
    }

    userData.player!.game.start();
  }

  ///  –ò–≥—Ä–æ–∫ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
  static Future<void> invite(UserData fromUserData, int inviteUserId) async {
    UserData? inviteUserData = await users.get(inviteUserId);

    if (inviteUserData == null) {
      TelegramSendMessage(fromUserData,
          "–≠—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ\\. –°–Ω–∞—á–∞–ª–∞ –æ–Ω –¥–æ–ª–∂–µ–Ω –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–æ—Ç—É\\.",
          replyMarkup: Buttons.delete);

      return;
    }

    if (inviteUserData.player != null) {
      TelegramSendMessage(fromUserData,
          "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∏–≥—Ä–æ–∫–∞\\: ${inviteUserData.url}\\. –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∏–≥—Ä–µ\\.",
          replyMarkup: Buttons.delete);

      return;
    }

    if (inviteUserData.inviteGame != null) {
      TelegramSendMessage(fromUserData,
          "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∏–≥—Ä–æ–∫–∞\\: ${inviteUserData.url}\\. –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–ª–≤–µ–Ω–Ω–æ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\\.",
          replyMarkup: Buttons.delete);
      return;
    }

    if (fromUserData.player == null) {
      TelegramSendMessage(fromUserData,
          "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∏–≥—Ä–æ–∫–∞\\: ${inviteUserData.url}\\. –¢–∞–∫ –∫–∞–∫ –≤—ã —Å–∞–º–∏ –Ω–µ –≤ –∏–≥—Ä–µ\\. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /create –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∏–≥—Ä–µ –æ—Ç–ø—Ä–∞–≤–∏–≤ –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –µ—ë –∫–æ–¥–æ–º\\, –∏–ª–∏ –∂–µ –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤ –∏–≥—Ä–µ –º–æ–≥—É—Ç –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –±–æ—Ç–æ–º –í–∞—à–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º \\, —á—Ç–æ–±—ã –í–∞–º –ø—Ä–∏—à–ª–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ\\.",
          replyMarkup: Buttons.delete);
      return;
    }

    var game = fromUserData.player!.game;

    inviteUserData.inviteGame = game;

    game.invitedUserData.add(inviteUserData);
    game.playersRefreshMessage();

    TelegramSendMessage(fromUserData,
        '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ –∏–≥—Ä–æ–∫—É\\: ${inviteUserData.url}\\!',
        replyMarkup: Buttons.delete);

    TelegramSendMessage(
        inviteUserData, "${fromUserData.url} –æ—Ç–ø—Ä–∞–≤–∏–ª –í–∞–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –∏–≥—Ä—É",
        replyMarkup: Buttons.invite,
        duration: Duration(minutes: 2), onAutoDelete: (value) {
      if (value) {
        inviteUserData.inviteGame?.invitedUserData.remove(inviteUserData);
        inviteUserData.inviteGame?.playersRefreshMessage();
        inviteUserData.inviteGame = null;
      }
    });
  }

  /// –û—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
  static void gameMoreInformation(UserData userData) {
    if (userData.player == null) throw "–í—ã –Ω–µ –≤ –∏–≥—Ä–µ!";
    if (!userData.player!.game.bStart) throw "–ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å";

    TelegramSendMessage(userData, userData.player!.game.stringMoreInformation,
        replyMarkup: Buttons.delete);
  }

  /// –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–æ–ª–∏
  static void gameAboutRole(UserData userData) {
    if (userData.player == null) throw "–í—ã –Ω–µ –≤ –∏–≥—Ä–µ!";
    if (!userData.player!.game.bStart) throw "–ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å";

    TelegramSendMessage(userData, userData.player!.roleMessage(),
        replyMarkup: Buttons.delete);
  }

  /// –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É
  static void reCreateGame(UserData userData) {
    if (userData.player == null) {
      TelegramSendMessage(
          userData, "–í—ã –Ω–µ –≤ –∏–≥—Ä–µ\\, –ø–æ—ç—Ç–æ–º—É –Ω–µ –º–æ–∂–µ—Ç–µ –µ–µ —Å–æ–∑–¥–∞—Ç—å\\.",
          replyMarkup: Buttons.delete);
      return;
    }

    if (userData.player!.game.adminUserData != userData) {
      TelegramSendMessage(userData,
          "–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\\, –ø–æ—ç—Ç–æ–º—É –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ\\. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ${userData.player!.game.adminUserData.url}\\.",
          replyMarkup: Buttons.delete);
      return;
    }

    AvGame game = userData.player!.game;

    game.reCreateGame();

    game.messageAllPlayers("–ò–≥—Ä–∞ –±—ã–ª–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞\\.");
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∏–∫–∞
  static void kickInit(UserData userData) {
    if (userData.player == null) {
      return;
    }

    if (!userData.player!.isAdmin) {
      return;
    }

    if (userData.player!.game.bStart) {
      return;
    }

    var players =
        userData.player!.game.players.where((value) => !value.isAdmin);

    if (players.isEmpty) {
      TelegramSendMessage(userData, "–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤", replyMarkup: Buttons.delete);
      return;
    }

    TelegramSendMessage(userData, "–ö–æ–≥–æ –≤—ã–∫–∏–Ω—É—Ç—å\\?",
        replyMarkup: GenerateButtons.fromPlayers(
            players: players,
            startStringCallback: "!kick",
            endCommands: Buttons.delete.inlineKeyboard));
  }

  /// –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Future<void> kick(UserData adminUserData, int userKickId) async {
    if (adminUserData.player == null) {
      return;
    }

    if (!adminUserData.player!.isAdmin) {
      return;
    }

    if (adminUserData.player!.game.bStart) {
      return;
    }

    UserData? kickedUserData = await users.get(userKickId);

    if (kickedUserData == null) {
      print('kicked user not found!');
      return;
    }

    AvGame game = adminUserData.player!.game;

    if (kickedUserData.player == null) {
      return;
    }

    if (game.players.contains(kickedUserData.player)) {
      game.deletePlayer(kickedUserData.player!, isKick: true);
    }
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–µ—Ä–µ–¥–∞—á–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
  static void newAdminInit(UserData userData) {
    if (userData.player == null) {
      return;
    }

    if (!userData.player!.isAdmin) {
      return;
    }

    var players =
        userData.player!.game.players.where((value) => !value.isAdmin);

    // if (players.isEmpty) {
    //   TelegramSendMessage(userId, "–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤", replyMarkup: Buttons.delete);
    //   return;
    // }

    TelegramSendMessage(userData, "–ö—Ç–æ –±—É–¥–µ—Ç –Ω–æ–≤—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\\?",
        replyMarkup: GenerateButtons.fromPlayers(
            players: players,
            startStringCallback: "!newAdmin",
            endCommands: Buttons.delete.inlineKeyboard));
  }

  /// –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
  static Future<void> newAdmin(UserData adminUserData, int newAdminId) async {
    if (adminUserData.player == null) {
      return;
    }

    if (!adminUserData.player!.isAdmin) {
      return;
    }
    UserData? newAdminUserData = await users.get(newAdminId);

    if (newAdminUserData == null) {
      print('new Admin user not found!');
      return;
    }

    AvGame game = adminUserData.player!.game;

    if (newAdminUserData.player == null) {
      return;
    }

    if (game.players.contains(newAdminUserData.player)) {
      game.changeAdministrator(newAdminUserData);
    }
  }

  /// –ü–æ–ø—ã—Ç–∫–∞ –≤–∫–ª—é—á–∏—Ç—å/–í—ã–∫–ª—é—á–∏—Ç—å —Ä—É—Å–∞–ª–∫—É
  static void gameChangeLady(UserData userData) {
    if (userData.player == null) {
      return;
    }

    if (!userData.player!.isAdmin) {
      return;
    }

    if (userData.player!.game.bStart) {
      return;
    }

    userData.player!.game.changeLady();
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å–º–µ–Ω—ã –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
  static void changeFirstPlayersInit(UserData userData) {
    if (userData.player == null) {
      return;
    }

    if (!userData.player!.isAdmin) {
      return;
    }

    if (userData.player!.game.bStart) {
      return;
    }

    List<Player> players = userData.player!.game.players;

    TelegramSendMessage(userData, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞",
        replyMarkup: GenerateButtons.fromPlayers(
            players: players,
            startStringCallback: "!changeFirstPlayers",
            endCommands: Buttons.delete.inlineKeyboard));
  }

  /// Callback –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫—É –∏–≥—Ä–æ–∫–æ–≤ –º–µ—Å—Ç–∞–º–∏
  static Future<void> changeFirstPlayerCallback(
      UserData userData, int messageId, List<String> params) async {
    if (userData.player == null) {
      throw "–í—ã –Ω–µ –≤ –∏–≥—Ä–µ";
    }

    if (!userData.player!.isAdmin) {
      throw "–í—ã –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!";
    }

    if (userData.player!.game.bStart) {
      throw "–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å";
    }

    // –ò–≥—Ä–∞ –∞–¥–º–∏–Ω–∞
    AvGame game = userData.player!.game;

    int userIdFirstPlayer = int.parse(params[0]);

    var userDataFirstPlayer = await users.get(userIdFirstPlayer);

    if (userDataFirstPlayer == null) {
      throw "–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞";
    }

    if (userDataFirstPlayer.player == null) {
      throw "–≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ –Ω–µ –≤ –∏–≥—Ä–µ";
    }

    if (userDataFirstPlayer.player!.game != game) {
      throw "–≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ –≤ –¥—Ä—É–≥–æ–π –∏–≥—Ä–µ";
    }

    game.changeFirstPlayer(userDataFirstPlayer.player!.index);
    throw "–ò–∑–º–µ–Ω–µ–Ω–µ–Ω–Ω–æ";
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–µ –∏–≥—Ä–æ–∫–æ–≤
  static void changeIndexPlayersInit(UserData userData) {
    if (userData.player == null) {
      return;
    }

    if (!userData.player!.isAdmin) {
      return;
    }

    if (userData.player!.game.bStart) {
      return;
    }

    List<Player> players = userData.player!.game.players;

    if (players.length < 5) {
      TelegramSendMessage(userData,
          "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–æ–≤ \\, –ø–æ–∫–∞ –∏—Ö –Ω–µ –±—É–¥–µ—Ç —Ö–æ—Ç—è –±—ã –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ \\(5\\)\\.",
          replyMarkup: Buttons.delete);
      return;
    }

    if (players.length > 12) {
      TelegramSendMessage(userData,
          "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–æ–≤ \\, –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 12\\.",
          replyMarkup: Buttons.delete);
      return;
    }

    TelegramSendMessage(userData, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞",
        replyMarkup: GenerateButtons.fromPlayers(
            players: players,
            startStringCallback: "!changeIndexPlayers",
            endCommands: Buttons.delete.inlineKeyboard,
            convertCallback: (player) => player.index.toString()));
  }

  /// Callback –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫—É –∏–≥—Ä–æ–∫–æ–≤ –º–µ—Å—Ç–∞–º–∏
  static void changeIndexCallback(
      UserData userData, int messageId, List<String> params) {
    if (userData.player == null) {
      throw "–í—ã –Ω–µ –≤ –∏–≥—Ä–µ";
    }

    if (!userData.player!.isAdmin) {
      throw "–í—ã –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!";
    }

    if (userData.player!.game.bStart) {
      throw "–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å";
    }

    // –ò–≥—Ä–∞ –∞–¥–º–∏–Ω–∞
    AvGame game = userData.player!.game;

    // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    List<int> usersIndex = params.map((e) => int.parse(e)).toList();

    // –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–æ, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–Ω—å—à–µ —á–µ–º –∏–≥—Ä–æ–∫–æ–≤ –≤ –∏–≥—Ä–µ
    usersIndex =
        usersIndex.where((oneIndex) => game.players.length > oneIndex).toList();

    // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    List<UserData> usersDataList = usersIndex
        .map<UserData>((oneUserIndex) => game.players[oneUserIndex].userData)
        .toList();

    //  –í—ã—á–∏—Å–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏–≥—Ä–æ–∫–æ–≤
    List<Player> leftPlayer = game.players
        .where((player) => !usersDataList.contains(player.userData))
        .toList();

    if (leftPlayer.length <= 1) {
      usersDataList.addAll(
          leftPlayer.map<UserData>((oneUserData) => oneUserData.userData));
      game.changeIndexFromUserData(usersDataList);
      throw "–ò–∑–º–µ–Ω–µ–Ω–Ω–æ";
    } else {
      String message = "–ù–æ–≤–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–æ–≤\\: \n";

      for (var oneUserData in usersDataList) {
        message += "${oneUserData.player!}\n";
      }

      message += "\n–ö—Ç–æ –±—É–¥–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º?";

      String newParam = "";

      // –û—Ç–ø—Ä–∞–≤–∏–º–º –≤—Å—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –∫–Ω–æ–ø–∫—É
      for (UserData oneUserData in usersDataList) {
        newParam += ">${oneUserData.player!.index}";
      }

      InlineKeyboardMarkup buttons = GenerateButtons.fromPlayers(
        players: leftPlayer,
        startStringCallback: "!changeIndexPlayers$newParam",
        endCommands: Buttons.delete.inlineKeyboard,
        convertCallback: (player) => player.index.toString(),
      );

      TelegramEditMessage(userData.chatId, messageId, message,
          replyMarkup: buttons);
    }
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Ä–æ–ª–∏ –¥–æ–±—Ä–∞
  static void changeGoodRoleInit(UserData userData) {
    if (userData.player == null) {
      return;
    }

    if (!userData.player!.isAdmin) {
      return;
    }

    if (userData.player!.game.bStart) {
      return;
    }

    Map<String, String> stringAndCallback = {};

    var goodRole = userData.player!.game.goodRoles;

    for (int i = 0; i < goodRole.length; i++) {
      stringAndCallback[goodRole[i].toString()] = goodRole[i].name;
    }

    var buttons = GenerateButtons.fromStrings(
        stringsAndCallback: stringAndCallback,
        endCommands: Buttons.delete.inlineKeyboard,
        startStringCallback: "!changeGood");

    TelegramSendMessage(userData, "–í—ã–±–µ—Ä–µ—Ç–µ –∫–æ–≥–æ –∑–∞–º–µ–Ω–∏—Ç—å?",
        replyMarkup: buttons);
  }

  /// Callback —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Ä–æ–ª–∏ –¥–æ–±—Ä–∞
  static void changeGoodRoleCallback(
      UserData userData, int messageId, List<String> params) {
    if (userData.player == null) {
      throw "–í—ã –Ω–µ –≤ –∏–≥—Ä–µ";
    }

    if (!userData.player!.isAdmin) {
      throw "–í—ã –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!";
    }

    if (userData.player!.game.bStart) {
      throw "–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å";
    }

    // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä, —Ç–æ –≤—ã–±—Ä–∞–ª–∏ –∫–æ–≥–æ –∑–∞–º–µ–Ω—è–µ–º. –ì–µ–Ω–µ—Ä–µ–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ "–∫–µ–º –∑–∞–º–µ–Ω–∏–º"
    if (params.length == 1) {
      Map<String, String> stringAndCallback = {};

      Role.namesAndEmojiGoodRoles.forEach((name, emoji) {
        stringAndCallback['$emoji $name'] = name;
      });

      var button = GenerateButtons.fromStrings(
          stringsAndCallback: stringAndCallback,
          startStringCallback: "!changeGood>${params[0]}",
          endCommands: Buttons.delete.inlineKeyboard);

      TelegramEditMessage(
          userData.chatId, messageId, "–ù–∞ –∫–æ–≥–æ –∑–∞–º–µ–Ω–∏—Ç—å ${params[0]}\\?",
          replyMarkup: button);

      return;
    }
    // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, —Ç–æ –≤—ã–±—Ä–∞–Ω–æ –Ω–∞ –∫–æ–≥–æ –∏ –∫–µ–º. –ê –∑–Ω–∞—á–∏—Ç –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º
    else {
      TelegramDeleteMessage(userData.chatId, messageId);
      var game = userData.player!.game;

      // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∑–∞–º–µ–Ω—è–µ–º–æ–π —Ä–æ–ª–∏
      int count = game.goodRoles.indexWhere((role) => role.name == params[0]);

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏
      if (count == -1) throw "–ó–∞–º–µ–Ω—è–µ–º–∞—è —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞";

      game.goodRoles[count] = Role.fromName(params[1], game) as Good;
      game.goodRoles.sort((good1, good2) => good1.sortValue - good2.sortValue);
      game.playersRefreshMessage();
    }
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Ä–æ–ª–∏ –¥–æ–±—Ä–∞
  static void changeEvilRoleInit(UserData userData) {
    if (userData.player == null) {
      return;
    }

    if (!userData.player!.isAdmin) {
      return;
    }

    if (userData.player!.game.bStart) {
      return;
    }

    Map<String, String> stringAndCallback = {};

    var evilRole = userData.player!.game.evilRoles;

    for (int i = 0; i < evilRole.length; i++) {
      stringAndCallback[evilRole[i].toString()] = evilRole[i].name;
    }

    var buttons = GenerateButtons.fromStrings(
        stringsAndCallback: stringAndCallback,
        endCommands: Buttons.delete.inlineKeyboard,
        startStringCallback: "!changeEvil");

    TelegramSendMessage(userData, "–í—ã–±–µ—Ä–µ—Ç–µ –∫–æ–≥–æ –∑–∞–º–µ–Ω–∏—Ç—å?",
        replyMarkup: buttons);
  }

  /// Callback —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Ä–æ–ª–∏ –¥–æ–±—Ä–∞
  static void changeEvilRoleCallback(
      UserData userData, messageId, List<String> params) {
    if (userData.player == null) {
      throw "–í—ã –Ω–µ –≤ –∏–≥—Ä–µ";
    }

    if (!userData.player!.isAdmin) {
      throw "–í—ã –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!";
    }

    if (userData.player!.game.bStart) {
      throw "–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å";
    }

    // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä, —Ç–æ –≤—ã–±—Ä–∞–ª–∏ –∫–æ–≥–æ –∑–∞–º–µ–Ω—è–µ–º. –ì–µ–Ω–µ—Ä–µ–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ "–∫–µ–º –∑–∞–º–µ–Ω–∏–º"
    if (params.length == 1) {
      Map<String, String> stringAndCallback = {};

      Role.namesAndEmojiEvilRoles.forEach((name, emoji) {
        stringAndCallback['$emoji $name'] = name;
      });

      var button = GenerateButtons.fromStrings(
          stringsAndCallback: stringAndCallback,
          startStringCallback: "!changeEvil>${params[0]}",
          endCommands: Buttons.delete.inlineKeyboard);

      TelegramEditMessage(
          userData.chatId, messageId, "–ù–∞ –∫–æ–≥–æ –∑–∞–º–µ–Ω–∏—Ç—å ${params[0]}\\?",
          replyMarkup: button);

      return;
    }
    // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, —Ç–æ –≤—ã–±—Ä–∞–Ω–æ –Ω–∞ –∫–æ–≥–æ –∏ –∫–µ–º. –ê –∑–Ω–∞—á–∏—Ç –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º
    else {
      TelegramDeleteMessage(userData.chatId, messageId);
      var game = userData.player!.game;

      // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∑–∞–º–µ–Ω—è–µ–º–æ–π —Ä–æ–ª–∏
      int count = game.evilRoles.indexWhere((role) => role.name == params[0]);

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏
      if (count == -1) throw "–ó–∞–º–µ–Ω—è–µ–º–∞—è —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞";

      game.evilRoles[count] = Role.fromName(params[1], game) as Evil;
      game.evilRoles.sort((good1, good2) => good1.sortValue - good2.sortValue);
      game.playersRefreshMessage();
    }
  }

  /// –ò–≥—Ä–æ–≤–æ–π Callback, –ø–µ—Ä–µ–¥–∞–µ–º –≤ –∏–≥—Ä—É
  static void gameCallback(
      UserData userData, String command, List<String> params) {
    if (userData.player == null) throw "Error!";
    AvGame game = userData.player!.game;
    if (!game.bStart) throw "Error!";
    if (game.turn == null) throw "Error!";
    if (!game.turn!.isActivePlayer(userData.player!)) throw "Error!";

    game.turn!.callback(userData.player!, command, params);
  }

  /// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–º–µ–Ω—è—Ç—å –∏–º—è
  static void changeName(UserData userData, String newName) async {
    if (userData.player != null) {
      TelegramSendMessage(userData,
          "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è\\, –Ω–∞—Ö–æ–¥—è—Å—å –≤ –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ\\. –°–Ω–∞—á–∞–ª–∞ –≤—ã–π–¥–µ—Ç–µ –∏–∑ –Ω–µ–µ\\.",
          replyMarkup: Buttons.delete);
      return;
    }

    String? name = correctName(newName);

    if (name == null) {
      TelegramSendMessage(userData, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è\\: $newName",
          replyMarkup: Buttons.delete);
      return;
    } else {
      userData.name = name;
      users.update(userData);

      TelegramSendMessage(userData, "–í–∞—à–µ –∏–º—è –∏–∑–º–µ–Ω–µ–Ω–Ω–æ –Ω–∞ ${userData.name}",
          replyMarkup: Buttons.delete);

      refreshUser(userData);
      return;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–æ–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–Ω–∏ –≤ –∫–æ—Ä–µ–∫—Ç–Ω–æ–µ (—É–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤) null –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ
  static String? correctName(String name) {
    String newName = "";
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ—Ä–µ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–Ω–≥–∏–π—Å–∫–∏–µ –∏ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã —Å –æ–¥–Ω–∏–º –ø—Ä–æ–±–µ–ª–æ–º

    RegExp regExp = RegExp(r'([A-Za-z–∞-—è–ê-—è]+|[ _]+)');

    List<RegExpMatch> matches = regExp.allMatches(name).toList();

    // –£–±—Ä–∞–ª–∏ –≤—Å–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    for (var element in matches) {
      if (element[0]![0] == " " || element[0]![0] == "_") {
        newName += " ";
      } else {
        newName += element[0]!;
      }
    }

    // –ï—Å–ª–∏ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–æ–±–µ–ª–∞–º–∏ —É–¥–∞–ª—è–µ–º
    newName = newName.replaceAll(RegExp(r'^ +'), '');

    // –ï—Å–ª–∏ –¥–ª–∏–Ω–Ω–∞ –±–æ–ª—å—à–µ 20 —Å–∏–º–≤–æ–ª–æ–≤ –æ–±—Ä–µ–∑–∞–µ–º
    if (newName.length > 20) {
      newName = newName.substring(0, 20);
    }

    // –ï—Å–ª–∏ –æ–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–æ–±–µ–ª–∞–º–∏ —É–¥–∞–ª—è–µ–º
    newName = newName.replaceAll(RegExp(r' +$'), '');

    // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–≤—à–∏–µ—Å—è —Å—Ç—Ä–æ–∫–∞ –º–µ–Ω—å—à–µ 2 —Å–∏–º–≤–æ–ª–æ–≤
    if (newName.length < 2) {
      return null;
    } else {
      return newName;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —Å–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ username
  static Future<void> checkUsername(UserData userData, User user) async {
    if (userData.username != user.username) {
      userData.username = user.username;
      users.update(userData);
      // await users.rewrite(userData.copyWidth(username: user.username));
    }
  }

  /// –§—É–Ω–∫—Ü–∏—è –æ—Å—â–∫—Å—Ç–≤–ª—è—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–≥—Ä
  static void _autoDeleteGameInit() async {
    Future.doWhile(() async {
      await Future.delayed(Duration(minutes: 30));

      var games = codeGames.values.toList();
      var now = DateTime.now();

      for (var oneGame in games) {
        /// –ï—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –µ–µ
        if (oneGame.bStart) {
          continue;
        }

        if (oneGame.createDateTime.difference(now).inMinutes >= 40) {
          oneGame.deleteGame();
        }
      }

      return true;
    });
  }

  static void adminTelegramMessage(UserData userData) async {
    if (admin_users.contains(userData.userId) == false) {
      return;
    }

    String msg = "";

    int allCountUser = await users.getCountAllUsers();
    msg += "–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\\: $allCountUser";
    msg += "\n–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\\: ${users.users.length}";
    msg += "\n–ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä\\: ${codeGames.length}";

    if (codeGames.isNotEmpty) {
      msg += "\n\n–ß—Ç–æ–±—ã –ø–æ–¥—Å–º–æ—Ç—Ä–µ—Ç—å /show –∏–ª–∏ /showm —Å –Ω–æ–º–µ—Ä–æ–º –∏–≥—Ä—ã\n–ò–≥—Ä—ã\\:\n";

      for (var oneGame in codeGames.values) {
        if (oneGame.bStart) {
          msg += 'üéÆ ';
        } else {
          msg += 'üî¢ ';
        }

        msg += '`${oneGame.gameCode}` \\: ${oneGame.players.length} –∏–≥—Ä–æ–∫–æ–≤';
      }
    }

    TeleBot.sendMessage(userData, msg, replyMarkup: Buttons.delete);
  }

  static void adminShowGame(UserData userData, String codeGame) {
    if (admin_users.contains(userData.userId) == false) {
      return;
    }

    codeGame = codeGame.toUpperCase();

    if (!codeGames.containsKey(codeGame)) {
      TeleBot.sendMessage(userData, "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
          replyMarkup: Buttons.delete);
      return;
    }

    TeleBot.sendMessage(
        userData, "`$codeGame`\n${codeGames[codeGame]!.gameMainMessage}",
        replyMarkup: Buttons.delete);
  }

  static void adminShowMoreGame(UserData userData, String codeGame) {
    if (admin_users.contains(userData.userId) == false) {
      return;
    }

    codeGame = codeGame.toUpperCase();

    if (!codeGames.containsKey(codeGame)) {
      TeleBot.sendMessage(userData, "–ò–≥—Ä–∞ `$codeGame` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
          replyMarkup: Buttons.delete);
      return;
    }

    var game = codeGames[codeGame]!;

    String text = game.stringMoreInformation;

    TeleBot.sendMessage(userData, "`$codeGame`\n$text",
        replyMarkup: Buttons.delete);
  }
}
